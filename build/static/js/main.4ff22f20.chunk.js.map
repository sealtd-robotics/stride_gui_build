{"version":3,"sources":["shared/constants.ts","networking.ts","shared/utilities.ts","components/SideDrawer.tsx","components/TopBar.tsx","components/RobotConnectCard.tsx","pages/InitialSetup.tsx","components/PathRecorderPopUpCard.tsx","components/Joystick.tsx","pages/ManualControl.tsx","components/GeneralCard.tsx","components/GpsCard.tsx","components/MotorControllerCard.tsx","components/TargetVehicleCard.tsx","pages/RobotStatus.tsx","components/path/PathRecoderTab.tsx","components/path/PathViewingTab.tsx","components/path/SharedPathTab.tsx","pages/Path.tsx","components/path_following/PrepareTab.tsx","components/path_following/TestTab.tsx","pages/PathFollowing.tsx","components/AutoDownhill.tsx","components/TestDataReadyPopUp.tsx","path-recorder.ts","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["DRAWER_WIDTH","OVERSEER_STATE_STRING","MC_STATE_STRING","NMT_STATE_STRING","GNSS_FIX_TYPE","MC_ERROR_WORD","Networking","id","isConnectedOnce","guiState","robotState","socket","senders","dataArrivalTime","intervalId1","intervalId2","receivedSharedPath","pathToFollow","lastConnectedId","isNewTestDataReady","testLogMessages","errorMessages","this","isConnected","type","robotVelocityCommand","v","w","robotTurningRadius","overseerState","websocketClientCount","doesBrakeWhenStopped","robotTemperature","batteryTemperature","batteryVoltage","motorControllers","leftFront","state","heartbeatNmt","isHeartbeatTimeout","motorCurrentDraw","wheelRpmActual","errorWord","windingTemperature","leftBack","rightFront","rightBack","gps","status","latitude","longitude","northVelocity","eastVelocity","zAngularVelocity","heading","pathFollower","pathName","scriptName","targetVehicle","velocity","gps_ready","gps_correction_type","timestamp","latitudes","longitudes","WebSocket","error","console","onopen","event","Date","now","setInterval","close","heartbeat","onmessage","data","JSON","parse","toLocaleTimeString","push","commandMessage","newline_separated","errorMessage","split","error_message","onclose","clearInterval","joystick","travel","angle","message","send","stringify","spin","angular_velocity","x","theta","moveForward","stop","enableManaul","idle","readyState","OPEN","toggleBrakeWhenStopped","setMagneticCalibration","method","sharePath","startPathFollowing","uploadPath","filename","fileContent","uploadScript","returnToStart","hasErrors","EN_factors","lat_ref","e","R","pi","Math","PI","sin","cos","sqrt","LL2NE","long_ref","E_factor","N_factor","useStyles","makeStyles","theme","toolbar","mixins","drawerPaper","width","logo","paddingTop","list","padding","errorIcon","color","Component","networking","mobileOpen","setMobileOpen","classes","useTheme","history","useHistory","itemsLIst","text","onClick","canShowErrorIcon","drawer","className","Typography","variant","align","Divider","List","map","item","ListItem","button","ListItemText","primary","Tooltip","title","Hidden","mdUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","smDown","appBar","breakpoints","up","marginLeft","marginRight","menuButton","display","spacing","start","backgroundColor","background","connection","reconnect","topBarTitle","pathRecorder","handleRobotConnect","AppBar","position","Toolbar","IconButton","edge","noWrap","isRecording","style","xsDown","Button","fontSize","margin","textField","handleRobotDisconnect","useState","setId","Card","CardContent","TextField","label","onChange","target","value","onKeyDown","key","Page","setTopBarTitle","useEffect","Grid","container","justify","alignItems","root","marginTop","boxShadow","zIndex","body","pathSwitch","numberOfPoints","FormControlLabel","control","Switch","checked","isRecordingLine","toggleLineRecording","Joystick","circleDiameter","sender_thottle_time","previousTime","handleJoystickStart","evt","handleJoystickEnd","setTimeout","props","handleJoystickMove","distance","radian","marginBottom","toFixed","options","mode","top","left","size","nippleSize","outline","height","overflow","onStart","onEnd","onMove","spinBox","moveButton","rotateRightButton","rotateIcon","isSpinning","isMovingForward","WebkitUserSelect","disabled","Box","onPointerDown","onPointerUp","onPointerOut","expand","paddingBottom","transform","transition","transitions","create","duration","shortest","expandOpen","cardContent","React","expanded","setExpanded","Collapse","in","timeout","unmountOnExit","CardActions","disableSpacing","clsx","pow","verticalAlign","motorController","location","toString","copyButton","navigator","clipboard","writeText","mb","flexDirection","border","overflowY","overflowX","msg","notes","snackOpen","setSnackOpen","paddingLeft","requestRecording","stopRecording","pathString","i","concat","blob","Blob","saveAs","exportPath","Snackbar","autoHideDuration","elevation","severity","chartContainer","chartStyle","bottom","right","pathViewer","easts","norths","chartRef","length","pos_north","pos_east","current","createChartData","str","isNaN","Number","parseFloat","importFileRef","file","files","reader","FileReader","addEventListener","splitText","result","lineNumber","line","latLong","isNumeric","readAsText","chartData","ax","ay","aValue","x1","y1","x2","y2","desiredSpacing","useRef","useLayoutEffect","chart","am4core","am4charts","paddingRight","xAxis","xAxes","renderer","minGridDistance","baseGrid","strokeOpacity","strokeWidth","yAxis","yAxes","series1","series","dataFields","valueX","valueY","bullet1","bullets","circle","radius","numberFormatter","numberFormat","tooltipText","scrollbarX","scrollbarY","dispose","importFromRecorder","component","ref","importFromFile","hidden","sharedPath","TabPanel","children","index","other","role","p","palette","tab","setValue","Tabs","scrollButtons","indicatorColor","textColor","newValue","Tab","snackbar","opacity","uploadPathRef","uploadScriptRef","wrongExtensionSnackbarOpen","setWrongExtensionSnackbarOpen","name","anchorOrigin","vertical","horizontal","pathDisplay","robot_east","robot_north","pathSeriesRef","xAxisRef","yAxisRef","forceRun","undefined","eastMin","min","eastMax","max","northMin","northMax","axisLength","createPathSeriesData","headingRadian","robotSeriesRef","addData","bx","by","pathSeriesData","messageBox","maxHeight","plotPathSeries","plotRobotSeries","strictMinMax","pathSeries","robotSeries","stroke","bullet2","propertyFields","rotation","arrow","createChild","horizontalCenter","verticalCenter","fill","link","document","createElement","href","click","downloadTestData","motorTempInfoButton","motorTempInfoCard","maxMotorTemp","setMaxMotorTemp","snackbarOpen","setSnackbarOpen","modalOpen","setModalOpen","mcs","max_t","Modal","justifyContent","PathRecorder","hasBeenRecordingLine","pointDistance","priorLatitude","priorLongitude","latRef","longRef","recorderId","haversineDistance","haversine","EN","northStart","eastStart","northEnd","eastEnd","lineDistance","divisions","floor","newLatitude","newLongitude","lat1","lat2","long1","long2","latRadian1","latRadian2","longRadian1","deltaLat","deltaLong","content","App","setForceRerender","id1","recordWhenRequested","CssBaseline","path","exact","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4ff22f20.chunk.js","sourcesContent":["export const DRAWER_WIDTH = 185\nexport const OVERSEER_STATE_STRING: { [char: string]: string } = {\n  0: \"Initial\",\n  1: \"Manual\",\n  2: \"Auto\",\n  3: \"E-Stopped\",\n  // 4: \"Error\",\n  5: \"Stopped\",\n  6: \"Decending\",\n  7: \"Idle\",\n}\n\nexport const MC_STATE_STRING: { [char: string]: string } = {\n  0: \"not ready to switch on\",\n  64: \"switch on disabled\",\n  33: \"ready to switch on\",\n  35: \"switched on\",\n  39: \"operation enabled\",\n  7: \"quick stop active\",\n  15: \"fault reaction active\",\n  8: \"fault\",\n}\n\nexport const NMT_STATE_STRING: { [key: string]: string } = {\n  0: \"boot up\",\n  4: \"stopped\",\n  5: \"operational\",\n  127: \"pre-operational\",\n}\n\nexport const GNSS_FIX_TYPE: { [key: string]: string } = {\n  0: \"No Solution\",\n  1: \"Unknown\",\n  2: \"Single\",\n  3: \"PSRDIFF\",\n  4: \"SBAS\",\n  5: \"Omnister\",\n  6: \"RTK Float\",\n  7: \"RTK Integer\",\n}\n\nexport const MC_ERROR_WORD: { [key: string]: string } = {\n  0: \"None\",\n  1: \"SpeedDeviationError\",\n  2: \"FollowingError\",\n  4: \"OverVoltageError\",\n  8: \"UnderVoltageError\",\n  16: \"TempWarning\",\n  32: \"TempError\",\n  64: \"Encoder error\",\n  128: \"Int HW error\",\n  512: \"Current Measurement Error\",\n  2048: \"Com error\",\n  4096: \"Calc error\",\n  8192: \"Dynamic Limit\",\n  16384: \"Safety monitor error\",\n}\n","import { GuiState, RobotState, Senders } from \"./shared/interfaces\"\n\nexport default class Networking {\n  guiState: GuiState\n  robotState: RobotState\n  socket: WebSocket\n  senders: Senders\n  dataArrivalTime: number\n  intervalId1!: NodeJS.Timeout\n  intervalId2!: NodeJS.Timeout\n  receivedSharedPath: { timestamp: string; latitudes: Array<number>; longitudes: Array<number> }\n  pathToFollow: { latitudes: Array<number>; longitudes: Array<number> }\n  lastConnectedId: string\n  isConnectedOnce: boolean\n  isNewTestDataReady: boolean\n  testLogMessages: Array<string>\n  errorMessages: Array<string>\n\n  constructor(id: string, isConnectedOnce: boolean) {\n    if (isConnectedOnce) {\n      this.lastConnectedId = id\n      this.isConnectedOnce = true\n    } else {\n      this.lastConnectedId = \"\"\n      this.isConnectedOnce = false\n    }\n\n    this.guiState = {\n      isConnected: false,\n      id: id,\n    }\n\n    // robotState:\n    //   -should have the same keys as the received JSON message from robot\n    //   -JSON message is received continuosly at certain rate\n    this.robotState = {\n      type: \"robotState\",\n      robotVelocityCommand: {\n        v: 0,\n        w: 0,\n      },\n      robotTurningRadius: 0,\n      overseerState: 0,\n      websocketClientCount: 0,\n      doesBrakeWhenStopped: false,\n      robotTemperature: 0,\n      batteryTemperature: 0,\n      batteryVoltage: 0,\n      motorControllers: {\n        leftFront: {\n          state: 0,\n          heartbeatNmt: 0,\n          isHeartbeatTimeout: false,\n          motorCurrentDraw: 0,\n          wheelRpmActual: 0,\n          errorWord: 0,\n          windingTemperature: 0,\n        },\n        leftBack: {\n          state: 0,\n          heartbeatNmt: 0,\n          isHeartbeatTimeout: false,\n          motorCurrentDraw: 0,\n          wheelRpmActual: 0,\n          errorWord: 0,\n          windingTemperature: 0,\n        },\n        rightFront: {\n          state: 0,\n          heartbeatNmt: 0,\n          isHeartbeatTimeout: false,\n          motorCurrentDraw: 0,\n          wheelRpmActual: 0,\n          errorWord: 0,\n          windingTemperature: 0,\n        },\n        rightBack: {\n          state: 0,\n          heartbeatNmt: 0,\n          isHeartbeatTimeout: false,\n          motorCurrentDraw: 0,\n          wheelRpmActual: 0,\n          errorWord: 0,\n          windingTemperature: 0,\n        },\n      },\n      gps: {\n        status: -1,\n        latitude: 0,\n        longitude: 0,\n        northVelocity: 0,\n        eastVelocity: 0,\n        zAngularVelocity: 0,\n        heading: 0,\n      },\n      pathFollower: {\n        pathName: \"\",\n        scriptName: \"\",\n      },\n      targetVehicle: {\n        latitude: 0,\n        longitude: 0,\n        heading: 0,\n        velocity: 0,\n        gps_ready: false,\n        gps_correction_type: 0,\n      },\n    }\n\n    // Here are the attributes that don't get updated continuously\n    this.receivedSharedPath = { timestamp: \"\", latitudes: [], longitudes: [] }\n    this.pathToFollow = { latitudes: [], longitudes: [] }\n    this.isNewTestDataReady = false\n    this.testLogMessages = []\n    this.errorMessages = []\n\n    // For disconnecting when no more incoming data\n    this.dataArrivalTime = 0\n\n    try {\n      if (id === \"localhost\") {\n        // for debug\n        this.socket = new WebSocket(\"ws://localhost:9000\")\n      } else if (id === \"999\") {\n        // for debug\n        this.socket = new WebSocket(\"ws://192.168.1.129:9000\")\n      } else {\n        this.socket = new WebSocket(\"ws://195.0.0.\" + id + \":9000\")\n      }\n    } catch (error) {\n      console.error(error)\n      this.socket = new WebSocket(\"ws://0.0.0.0\")\n    }\n\n    this.socket.onopen = (event) => {\n      this.guiState.isConnected = true\n      this.dataArrivalTime = Date.now()\n\n      this.lastConnectedId = this.guiState.id\n      this.isConnectedOnce = true\n\n      // disconnect if no messages are received for a period of time\n      this.intervalId1 = setInterval(() => {\n        if (Date.now() - this.dataArrivalTime > 4000) {\n          this.guiState.isConnected = false // needed when wifi gets disconnected\n          this.socket.close()\n        }\n      }, 250)\n\n      // send out heartbeat\n      this.intervalId2 = setInterval(() => {\n        this.senders.heartbeat()\n      }, 200)\n    }\n\n    this.socket.onmessage = (event) => {\n      this.dataArrivalTime = Date.now()\n\n      const data = JSON.parse(event.data)\n\n      if (data.type === \"robotState\") {\n        this.robotState = data\n      } else if (data.type === \"sharedPath\") {\n        const d = new Date()\n        const timestamp = d.toLocaleTimeString()\n\n        this.receivedSharedPath = {\n          timestamp: timestamp,\n          latitudes: data.latitudes,\n          longitudes: data.longitudes,\n        }\n      } else if (data.type === \"/path_follower/path_to_follow\") {\n        this.pathToFollow.latitudes = data.latitudes\n        this.pathToFollow.longitudes = data.longitudes\n      } else if (data.type === \"createdCSV\") {\n        this.isNewTestDataReady = true\n      } else if (data.type === \"commandMessage\") {\n        this.testLogMessages.push(data.commandMessage)\n      } else if (data.type === \"errorMessage\") {\n        // Attach a date to the error message\n        const d = new Date()\n        const timestamp = d.toLocaleTimeString()\n        this.errorMessages.push(timestamp)\n\n        // Attach the error messages to both test log and error log\n        const newline_separated = data.errorMessage.split(/\\r?\\n/)\n        for (const error_message of newline_separated) {\n          // \"2\" is Auto\n          if (this.robotState.overseerState === 2) {\n            this.testLogMessages.push(error_message)\n          }\n          this.errorMessages.push(error_message)\n        }\n      }\n    }\n\n    // the onclose callback will not run immediately when wifi gets disconnected\n    this.socket.onclose = (event) => {\n      this.guiState.isConnected = false\n      clearInterval(this.intervalId1)\n      clearInterval(this.intervalId2)\n    }\n\n    this.senders = {\n      joystick: (travel, angle) => {\n        const message = {\n          type: \"/joystick\",\n          travel: travel,\n          angle: angle,\n        }\n\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify(message))\n        }\n      },\n\n      spin: (angular_velocity) => {\n        const message = {\n          type: \"/robot_velocity_command\",\n          x: 0,\n          theta: angular_velocity,\n        }\n\n        // overseerState \"1\" is MANUAL state\n        if (this.guiState.isConnected && this.robotState.overseerState === 1) {\n          this.socket.send(JSON.stringify(message))\n        }\n      },\n\n      moveForward: (velocity) => {\n        const message = {\n          type: \"/robot_velocity_command\",\n          x: velocity,\n          theta: 0,\n        }\n        // overseerState \"1\" is MANUAL state\n        if (this.guiState.isConnected && this.robotState.overseerState === 1) {\n          this.socket.send(JSON.stringify(message))\n        }\n      },\n\n      stop: () => {\n        const message = {\n          type: \"/gui/stop_clicked\",\n        }\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify(message))\n        }\n      },\n\n      enableManaul: () => {\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify({ type: \"/gui/enable_manual_clicked\" }))\n        }\n      },\n\n      idle: () => {\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify({ type: \"/gui/idle_clicked\" }))\n        }\n      },\n\n      heartbeat: () => {\n        if (this.socket.readyState === WebSocket.OPEN) {\n          this.socket.send(JSON.stringify({ type: \"/gui/heartbeat\" }))\n        }\n      },\n\n      toggleBrakeWhenStopped: () => {\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify({ type: \"/gui/brake_when_stopped_toggled\" }))\n        }\n      },\n\n      setMagneticCalibration: (method) => {\n        const message = {\n          type: \"/an_device/magnetic_calibration/calibrate\",\n          method: method,\n        }\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify(message))\n        }\n      },\n\n      sharePath: (latitudes, longitudes) => {\n        const message = {\n          type: \"sharedPath\",\n          latitudes: latitudes,\n          longitudes: longitudes,\n        }\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify(message))\n        }\n      },\n\n      startPathFollowing: () => {\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify({ type: \"/gui/start_path_following_clicked\" }))\n        }\n      },\n\n      uploadPath: (filename, fileContent) => {\n        // return if file extension is not txt\n        if (filename.split(\".\")[1] !== \"txt\") {\n          return\n        }\n\n        const message = {\n          type: \"/gui/upload_path_clicked\",\n          filename: filename,\n          fileContent: fileContent,\n        }\n        this.socket.send(JSON.stringify(message))\n      },\n\n      uploadScript: (filename, fileContent) => {\n        // return if file extension is not py\n        if (filename.split(\".\")[1] !== \"py\") {\n          return\n        }\n\n        const message = {\n          type: \"/gui/upload_script_clicked\",\n          filename: filename,\n          fileContent: fileContent,\n        }\n        this.socket.send(JSON.stringify(message))\n      },\n\n      returnToStart: () => {\n        if (this.guiState.isConnected) {\n          this.socket.send(JSON.stringify({ type: \"/gui/return_to_start_clicked\" }))\n        }\n      },\n    }\n  }\n}\n","// abbreviations\n// lat: latitude\n// long: longitude\n// ref: reference\n// pos: position\n\nimport { RobotState } from \"./interfaces\"\n\nexport function hasErrors(robotState: RobotState) {\n  return (\n    (robotState.motorControllers.leftFront.errorWord !== 0 &&\n      robotState.motorControllers.leftFront.errorWord !== 64) ||\n    robotState.motorControllers.leftFront.isHeartbeatTimeout ||\n    (robotState.motorControllers.leftBack.errorWord !== 0 &&\n      robotState.motorControllers.leftBack.errorWord !== 64) ||\n    robotState.motorControllers.leftBack.isHeartbeatTimeout ||\n    (robotState.motorControllers.rightFront.errorWord !== 0 &&\n      robotState.motorControllers.rightFront.errorWord !== 64) ||\n    robotState.motorControllers.rightFront.isHeartbeatTimeout ||\n    (robotState.motorControllers.rightBack.errorWord !== 0 &&\n      robotState.motorControllers.rightBack.errorWord !== 64) ||\n    robotState.motorControllers.rightBack.isHeartbeatTimeout\n  )\n}\n\nexport function EN_factors(lat_ref: number) {\n  const e = 0.0818191908426\n  const R = 6378137\n  const pi = Math.PI\n\n  const sin = Math.sin\n  const cos = Math.cos\n  const sqrt = Math.sqrt\n\n  const E_factor =\n    (((cos((lat_ref * pi) / 180) * R) / sqrt(1 - sin((lat_ref * pi) / 180) ** 2 * e ** 2)) * pi) / 180\n\n  const N_factor =\n    ((((1 - e ** 2) * R) /\n      ((1 - sin((lat_ref * pi) / 180) ** 2 * e ** 2) * sqrt(1 - sin((lat_ref * pi) / 180) ** 2 * e ** 2))) *\n      pi) /\n    180\n  return [E_factor, N_factor]\n}\n\n// Latitude Longitude to North East\nexport function LL2NE(\n  latitude: number,\n  longitude: number,\n  lat_ref: number,\n  long_ref: number,\n  E_factor: number,\n  N_factor: number\n) {\n  const pos_east = (longitude - long_ref) * E_factor\n  const pos_north = (latitude - lat_ref) * N_factor\n  return [pos_north, pos_east]\n}\n\nexport function NE2LL(\n  pos_north: number,\n  pos_east: number,\n  lat_ref: number,\n  long_ref: number,\n  E_factor: number,\n  N_factor: number\n) {\n  const longitude = pos_east / E_factor + long_ref\n  const latitude = pos_north / N_factor + lat_ref\n  return [latitude, longitude]\n}\n","import React from \"react\"\nimport { DRAWER_WIDTH } from \"../shared/constants\"\nimport { useHistory } from \"react-router-dom\"\n\nimport Divider from \"@material-ui/core/Divider\"\nimport Drawer from \"@material-ui/core/Drawer\"\nimport Hidden from \"@material-ui/core/Hidden\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport Typography from \"@material-ui/core/Typography\"\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\"\nimport { hasErrors } from \"../shared/utilities\"\nimport Networking from \"../networking\"\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: theme.mixins.toolbar, // necessary for pushing the SideDrawer below the TopBar\n  drawerPaper: {\n    width: DRAWER_WIDTH,\n  },\n  logo: {\n    paddingTop: 10,\n  },\n  list: {\n    padding: 0,\n  },\n  errorIcon: {\n    color: \"red\",\n  },\n}))\n\ninterface Props {\n  networking: Networking\n  mobileOpen: boolean\n  setMobileOpen: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport default function Component({ networking, mobileOpen, setMobileOpen }: Props) {\n  const classes = useStyles()\n  const theme = useTheme()\n  const history = useHistory()\n\n  const itemsLIst = [\n    {\n      text: \"Initial Setup\",\n      onClick: () => {\n        history.push(\"/initialsetup\")\n        setMobileOpen(false)\n      },\n      canShowErrorIcon: false,\n    },\n    {\n      text: \"Manual Control\",\n      onClick: () => {\n        history.push(\"/manualcontrol\")\n        setMobileOpen(false)\n      },\n      canShowErrorIcon: false,\n    },\n    {\n      text: \"Robot Status\",\n      onClick: () => {\n        history.push(\"/robotstatus\")\n        setMobileOpen(false)\n      },\n      canShowErrorIcon: true,\n    },\n    {\n      text: \"Path\",\n      onClick: () => {\n        history.push(\"/path\")\n        setMobileOpen(false)\n      },\n      canShowErrorIcon: false,\n    },\n    {\n      text: \"Path Following\",\n      onClick: () => {\n        history.push(\"/pathfollowing\")\n        setMobileOpen(false)\n      },\n      canShowErrorIcon: false,\n    },\n  ]\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar}>\n        <Typography variant=\"h4\" align=\"center\" color=\"primary\" className={classes.logo}>\n          STRIDE\n        </Typography>\n      </div>\n\n      <Divider />\n      <List className={classes.list}>\n        {itemsLIst.map((item) => {\n          const { text, onClick, canShowErrorIcon } = item\n          return (\n            <ListItem button key={text} onClick={onClick}>\n              <ListItemText primary={text} />\n              {canShowErrorIcon && hasErrors(networking.robotState) && networking.guiState.isConnected ? (\n                <Tooltip title=\"ERROR\">\n                  <ErrorOutlineIcon className={classes.errorIcon} />\n                </Tooltip>\n              ) : null}\n            </ListItem>\n          )\n        })}\n      </List>\n    </div>\n  )\n\n  return (\n    <nav aria-label=\"mailbox folders\">\n      <Hidden mdUp implementation=\"css\">\n        <Drawer\n          variant=\"temporary\"\n          anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n          open={mobileOpen}\n          onClose={() => setMobileOpen(false)}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n\n      <Hidden smDown implementation=\"css\">\n        <Drawer\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          variant=\"permanent\"\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Hidden>\n    </nav>\n  )\n}\n","import React from \"react\"\nimport { DRAWER_WIDTH, OVERSEER_STATE_STRING } from \"../shared/constants\"\n\nimport AppBar from \"@material-ui/core/AppBar\"\nimport Button from \"@material-ui/core/Button\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\"\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\"\nimport Hidden from \"@material-ui/core/Hidden\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport Toolbar from \"@material-ui/core/Toolbar\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\"\nimport PathRecorder from \"../path-recorder\"\nimport { hasErrors } from \"../shared/utilities\"\nimport Networking from \"../networking\"\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    [theme.breakpoints.up(\"md\")]: {\n      width: `calc(100% - ${DRAWER_WIDTH}px)`,\n      marginLeft: DRAWER_WIDTH,\n    },\n  },\n  title: {\n    marginRight: \"auto\",\n  },\n  menuButton: {\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n  stop: {\n    marginLeft: theme.spacing(1.5),\n  },\n  start: {\n    backgroundColor: \"green\",\n    color: \"white\",\n    marginLeft: theme.spacing(1.5),\n    \"&:hover\": {\n      background: \"darkgreen\",\n    },\n  },\n  connection: {\n    color: \"lightgray\",\n  },\n  state: {\n    marginLeft: theme.spacing(1.5),\n    color: \"lightgray\",\n  },\n  errorIcon: {\n    marginLeft: theme.spacing(1.5),\n    color: \"red\",\n  },\n  reconnect: {\n    marginLeft: theme.spacing(1.5),\n    backgroundColor: \"green\",\n    color: \"white\",\n    \"&:hover\": {\n      backgroundColor: \"darkgreen\",\n    },\n  },\n  idle: {\n    marginLeft: theme.spacing(1.5),\n    backgroundColor: \"green\",\n    color: \"white\",\n    \"&:hover\": {\n      backgroundColor: \"darkgreen\",\n    },\n  },\n}))\n\ninterface Props {\n  networking: Networking\n  setMobileOpen: React.Dispatch<React.SetStateAction<boolean>>\n  topBarTitle: string\n  pathRecorder: PathRecorder\n  handleRobotConnect: (id: string) => void\n}\n\nexport default function Component({\n  networking,\n  setMobileOpen,\n  topBarTitle,\n  pathRecorder,\n  handleRobotConnect,\n}: Props) {\n  const classes = useStyles()\n\n  const guiState = networking.guiState\n  const robotState = networking.robotState\n  const senders = networking.senders\n\n  function handleStopButton() {\n    senders.stop()\n  }\n\n  function handleIdle() {\n    senders.idle()\n  }\n\n  return (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          edge=\"start\"\n          onClick={() => setMobileOpen(true)}\n          className={classes.menuButton}\n        >\n          <MenuIcon />\n        </IconButton>\n\n        <Typography variant=\"h6\" noWrap className={classes.title}>\n          {topBarTitle}\n        </Typography>\n\n        {pathRecorder.isRecording ? (\n          <Tooltip title=\"Recording\">\n            <FiberManualRecordIcon style={{ color: \"red\", marginRight: \"6px\" }} />\n          </Tooltip>\n        ) : null}\n\n        {guiState.isConnected ? (\n          <>\n            <Hidden xsDown>\n              <Typography variant=\"body2\" className={classes.connection}>\n                {`ID: ${guiState.id}`}\n              </Typography>\n            </Hidden>\n\n            <Typography variant=\"body2\" className={classes.state}>\n              {OVERSEER_STATE_STRING[robotState.overseerState]}\n            </Typography>\n          </>\n        ) : (\n          <Typography variant=\"body2\" className={classes.connection}>\n            not connected\n          </Typography>\n        )}\n\n        {!guiState.isConnected && networking.lastConnectedId !== \"\" && (\n          <Button\n            className={classes.reconnect}\n            variant=\"contained\"\n            onClick={() => handleRobotConnect(\"useRecentId\")}\n          >\n            reconnect\n          </Button>\n        )}\n\n        {guiState.isConnected && hasErrors(robotState) ? (\n          <Tooltip title=\"ERROR\">\n            <ErrorOutlineIcon fontSize=\"large\" className={classes.errorIcon} />\n          </Tooltip>\n        ) : null}\n\n        {guiState.isConnected &&\n          (robotState.overseerState === 1 ||\n            robotState.overseerState === 2 ||\n            robotState.overseerState === 7 ||\n            robotState.overseerState === 4) && ( // if in manual, auto, idle, or return_to_start\n            <Button className={classes.stop} variant=\"contained\" color=\"secondary\" onClick={handleStopButton}>\n              stop\n            </Button>\n          )}\n\n        {guiState.isConnected &&\n          (robotState.overseerState === 5 || robotState.overseerState === 6) && ( // if in stopped or decending\n            <Button className={classes.idle} variant=\"contained\" onClick={handleIdle}>\n              idle\n            </Button>\n          )}\n      </Toolbar>\n    </AppBar>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport Typography from \"@material-ui/core/Typography\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Networking from \"../networking\"\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: theme.spacing(1),\n  },\n  status: {\n    margin: theme.spacing(1),\n  },\n  textField: {\n    width: \"15.5rem\",\n    margin: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}))\n\ninterface Props {\n  networking: Networking\n  handleRobotConnect: (id: string) => void\n  handleRobotDisconnect: () => void\n}\n\nexport default function Component({ networking, handleRobotConnect, handleRobotDisconnect }: Props) {\n  const classes = useStyles()\n\n  const [id, setId] = useState(\"\")\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\" className={classes.title}>\n          Robot Connection\n        </Typography>\n\n        <Typography variant=\"caption\" display=\"block\" className={classes.status}>\n          {networking.guiState.isConnected ? `conntected (ID: ${networking.guiState.id})` : \"not connected\"}\n        </Typography>\n\n        <TextField\n          label=\"Robot ID\"\n          variant=\"outlined\"\n          className={classes.textField}\n          onChange={(e) => {\n            setId(e.target.value)\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              handleRobotConnect(id)\n            }\n          }}\n        />\n        <br />\n\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => handleRobotConnect(id)}\n        >\n          Connect\n        </Button>\n\n        <Button\n          className={classes.button}\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => handleRobotDisconnect()}\n        >\n          Disconnect\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n","import React, { useState, useEffect } from \"react\"\n\nimport RobotConnectCard from \"../components/RobotConnectCard\"\n\nimport Grid from \"@material-ui/core/Grid\"\nimport Networking from \"../networking\"\n\ninterface Props {\n  networking: Networking\n  handleRobotConnect: (id: string) => void\n  handleRobotDisconnect: () => void\n  setTopBarTitle: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport default function Page({\n  networking,\n  handleRobotConnect,\n  handleRobotDisconnect,\n  setTopBarTitle,\n}: Props) {\n  useEffect(() => {\n    setTopBarTitle(\"Initial Setup\")\n  }, [])\n\n  return (\n    <Grid container spacing={2} justify=\"center\" alignItems=\"flex-start\">\n      <Grid item>\n        <RobotConnectCard\n          networking={networking}\n          handleRobotConnect={handleRobotConnect}\n          handleRobotDisconnect={handleRobotDisconnect}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\n// ws://192.168.1.129:9090\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Switch from \"@material-ui/core/Switch\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Card from \"@material-ui/core/Card\"\nimport Typography from \"@material-ui/core/Typography\"\nimport PathRecorder from \"../path-recorder\"\nimport Networking from \"../networking\"\nimport { GNSS_FIX_TYPE } from \"../shared/constants\"\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"inline-block\",\n    position: \"absolute\",\n    marginLeft: theme.spacing(1.5),\n    marginTop: theme.spacing(1.5),\n    // boxShadow: \"0 8px 40px -12px rgba(0,0,0,0.3)\",\n    boxShadow: \"3px 3px 5px rgba(0,0,0,0.2)\",\n    zIndex: 1,\n  },\n  title: {\n    margin: theme.spacing(1),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  pathSwitch: {\n    marginLeft: 0,\n  },\n}))\n\ninterface Props {\n  pathRecorder: PathRecorder\n  networking: Networking\n}\n\nexport default function Component({ pathRecorder, networking }: Props) {\n  const classes = useStyles()\n  const date = new Date()\n\n  return (\n    <Card variant=\"outlined\" className={classes.root}>\n      <Typography variant=\"h6\" className={classes.title}>\n        Recording Path\n      </Typography>\n\n      <Typography variant=\"body1\" className={classes.body}>\n        GPS Status: {GNSS_FIX_TYPE[networking.robotState.gps.status]}\n        <br />\n        Points Recorded: {pathRecorder.numberOfPoints}\n      </Typography>\n\n      <FormControlLabel\n        className={classes.pathSwitch}\n        control={\n          <Switch\n            checked={pathRecorder.isRecordingLine}\n            onChange={() => pathRecorder.toggleLineRecording()}\n            color=\"primary\"\n          />\n        }\n        label=\"Record a line\"\n      />\n    </Card>\n  )\n}\n","import React, { Component } from \"react\"\n\nimport ReactNipple from \"react-nipple\"\nimport \"react-nipple/lib/styles.css\"\nimport Tooltip from \"@material-ui/core/Tooltip\"\nimport PathRecorderPopUpCard from \"./PathRecorderPopUpCard\"\nimport PathRecorder from \"../path-recorder\"\nimport Fade from \"@material-ui/core/Fade\"\nimport Networking from \"../networking\"\n\n// Abbreviations:\n// ICR = instantaneous center of rotation\n// v,V = linear velocity\n// w,W = angular velocity\n// r,R = turning radius of robot geometric center\n\ninterface Props {\n  networking: Networking\n  pathRecorder: PathRecorder\n}\n\nexport default class Joystick extends Component<Props> {\n  circleDiameter = 300 // pixels\n  sender_thottle_time = 100 //ms\n  previousTime = Date.now()\n\n  render() {\n    return (\n      <div>\n        <h3 style={{ marginTop: 0, marginBottom: 5 }}>Press and drag below to move the robot</h3>\n\n        <Tooltip title=\"Linear Velocity\">\n          <span style={{ fontSize: 16 }}>\n            v: {this.props.networking.robotState.robotVelocityCommand.v.toFixed(2)} m/s\n          </span>\n        </Tooltip>\n\n        <Tooltip title=\"Measured Linear Velocity\">\n          <span style={{ fontSize: 16, marginLeft: 16 }}>\n            vm:{\" \"}\n            {Math.sqrt(\n              this.props.networking.robotState.gps.eastVelocity ** 2 +\n                this.props.networking.robotState.gps.northVelocity ** 2\n            ).toFixed(2)}{\" \"}\n            m/s\n          </span>\n        </Tooltip>\n\n        <br />\n\n        <Tooltip title=\"Angular Velocity\">\n          <span style={{ fontSize: 16 }}>\n            w: {((this.props.networking.robotState.robotVelocityCommand.w / Math.PI) * 180).toFixed(0)} deg/s\n          </span>\n        </Tooltip>\n\n        <Tooltip title=\"Turning Radius\">\n          <span style={{ fontSize: 16, marginLeft: 16 }}>\n            r: {this.props.networking.robotState.robotTurningRadius.toFixed(0)} m\n          </span>\n        </Tooltip>\n\n        <Tooltip title=\"Heading\">\n          <span style={{ fontSize: 16, marginLeft: 16 }}>\n            h: {((this.props.networking.robotState.gps.heading / Math.PI) * 180).toFixed(0)} deg\n          </span>\n        </Tooltip>\n\n        <br />\n        {this.props.pathRecorder.isRecording ? (\n          <PathRecorderPopUpCard pathRecorder={this.props.pathRecorder} networking={this.props.networking} />\n        ) : null}\n\n        <ReactNipple\n          className=\"nipple\"\n          options={{\n            mode: \"dynamic\",\n            color: \"blue\",\n            position: { top: \"50%\", left: \"50%\" },\n            size: this.circleDiameter,\n            nippleSize: 90,\n          }}\n          style={{\n            zIndex: 0,\n            outline: `1px dashed blue`,\n            width: \"100%\",\n            height: \"max( 100vh - 325px, 120px)\", // calc() not needed inside max()\n            // display: \"table\",\n            overflow: \"hidden\",\n          }}\n          onStart={this.handleJoystickStart}\n          onEnd={this.handleJoystickEnd}\n          onMove={this.handleJoystickMove}\n        />\n        {/* <DebugView data={this.state.data} /> */}\n      </div>\n    )\n  }\n\n  handleJoystickStart = (evt: any, data: any) => {}\n\n  handleJoystickEnd = (evt: any, data: any) => {\n    setTimeout(() => {\n      this.props.networking.senders.joystick(0, 0)\n    }, 100) // needed, otherwise the subscriber callback for /robot_velocity_command won't get triggered\n  }\n  handleJoystickMove = (evt: any, data: any) => {\n    if (Date.now() - this.previousTime < this.sender_thottle_time) {\n      return\n    }\n    this.previousTime = Date.now()\n\n    const travel = data.distance / (this.circleDiameter * 0.5)\n    const angle = data.angle.radian - Math.PI / 2 // the angle when pushing the joystick forwards is now 0\n\n    this.props.networking.senders.joystick(travel, angle)\n  }\n}\n","import React, { useState, useEffect } from \"react\"\nimport Joystick from \"../components/Joystick\"\nimport Switch from \"@material-ui/core/Switch\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\"\nimport RotateRightIcon from \"@material-ui/icons/RotateRight\"\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\"\nimport Box from \"@material-ui/core/Box\"\nimport PathRecorder from \"../path-recorder\"\nimport Networking from \"../networking\"\n\nconst useStyles = makeStyles((theme) => ({\n  spinBox: {\n    marginTop: theme.spacing(1.5),\n    marginBottom: theme.spacing(1.5),\n  },\n  moveButton: {\n    marginLeft: theme.spacing(2),\n  },\n  rotateRightButton: {\n    marginLeft: theme.spacing(2),\n  },\n  rotateIcon: {\n    marginLeft: theme.spacing(1),\n  },\n}))\n\ninterface Props {\n  networking: Networking\n  setTopBarTitle: React.Dispatch<React.SetStateAction<string>>\n  pathRecorder: PathRecorder\n}\n\nlet isSpinning = false\nlet isMovingForward = false\n\nexport default function Page({ networking, setTopBarTitle, pathRecorder }: Props) {\n  const classes = useStyles()\n\n  const robotState = networking.robotState\n  const senders = networking.senders\n\n  function handleManualSwitch(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.checked) {\n      senders.enableManaul()\n    } else {\n      senders.stop()\n    }\n  }\n\n  function handleBrakeWhenStoppedSwitch() {\n    senders.toggleBrakeWhenStopped()\n  }\n\n  useEffect(() => {\n    setTopBarTitle(\"Manual Control\")\n  }, [])\n\n  return (\n    // WebkitUserSelect is used to prevent random text selection when using the joystick\n    <div style={{ WebkitUserSelect: \"none\" }}>\n      {/* <p>heading: {((robotState.gps.heading / Math.PI) * 180).toFixed(0)}</p> */}\n      <FormControlLabel\n        control={\n          <Switch checked={robotState.overseerState === 1} onChange={handleManualSwitch} color=\"primary\" />\n        }\n        label=\"Enable Manual Control\"\n        disabled={\n          robotState.overseerState === 2 || robotState.overseerState === 3 || robotState.overseerState === 6\n        }\n      />\n\n      <FormControlLabel\n        control={\n          <Switch\n            checked={robotState.doesBrakeWhenStopped === true}\n            onChange={handleBrakeWhenStoppedSwitch}\n            color=\"primary\"\n          />\n        }\n        label=\"Apply Brake when Not Moving\"\n      />\n\n      <Box className={classes.spinBox}>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onPointerDown={() => {\n            isSpinning = true\n            senders.spin(0.3)\n          }}\n          onPointerUp={() => {\n            isSpinning = false\n            senders.spin(0)\n          }}\n          onPointerOut={() => {\n            if (isSpinning) {\n              senders.spin(0)\n            }\n          }}\n        >\n          spin <RotateLeftIcon className={classes.rotateIcon} />\n        </Button>\n\n        <Button\n          className={classes.rotateRightButton}\n          variant=\"outlined\"\n          color=\"primary\"\n          onPointerDown={() => {\n            isSpinning = true\n            senders.spin(-0.3)\n          }}\n          onPointerUp={() => {\n            isSpinning = false\n            senders.spin(0)\n          }}\n          onPointerOut={() => {\n            if (isSpinning) {\n              senders.spin(0)\n            }\n          }}\n        >\n          spin <RotateRightIcon className={classes.rotateIcon} />\n        </Button>\n\n        <Button\n          className={classes.moveButton}\n          variant=\"outlined\"\n          color=\"primary\"\n          onPointerDown={() => {\n            isMovingForward = true\n            senders.moveForward(0.75)\n          }}\n          onPointerUp={() => {\n            isMovingForward = false\n            senders.moveForward(0)\n          }}\n          onPointerOut={() => {\n            if (isMovingForward) {\n              senders.moveForward(0)\n            }\n          }}\n        >\n          move <ArrowUpwardIcon className={classes.rotateIcon} />\n        </Button>\n      </Box>\n\n      <Joystick networking={networking} pathRecorder={pathRecorder} />\n    </div>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport clsx from \"clsx\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardActions from \"@material-ui/core/CardActions\"\nimport Collapse from \"@material-ui/core/Collapse\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { RobotState } from \"../shared/interfaces\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: theme.spacing(1),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  expand: {\n    margin: \"0 auto\",\n    paddingTop: 0,\n    paddingBottom: 0,\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  cardContent: {\n    paddingBottom: 0,\n  },\n}))\n\nexport default function Component({ robotState }: { robotState: RobotState }) {\n  const classes = useStyles()\n  const [expanded, setExpanded] = React.useState(false)\n\n  function handleExpandClick() {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent className={classes.cardContent}>\n        <Typography variant=\"h5\" className={classes.title}>\n          General\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Battery Temperature: {robotState.batteryTemperature}F\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Robot Internal Temperature: {robotState.robotTemperature}F\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Clients Connected to Robot: {robotState.websocketClientCount}\n        </Typography>\n\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          <Typography variant=\"body1\" className={classes.body}>\n            Battery Voltage: {robotState.batteryVoltage.toFixed(2)}V\n          </Typography>\n        </Collapse>\n      </CardContent>\n\n      <CardActions disableSpacing>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport clsx from \"clsx\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardActions from \"@material-ui/core/CardActions\"\nimport Collapse from \"@material-ui/core/Collapse\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { RobotState } from \"../shared/interfaces\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport { GNSS_FIX_TYPE } from \"../shared/constants\"\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: theme.spacing(1),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  expand: {\n    margin: \"0 auto\",\n    paddingTop: 0,\n    paddingBottom: 0,\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  cardContent: {\n    paddingBottom: 0,\n  },\n}))\n\nexport default function Component({ robotState }: { robotState: RobotState }) {\n  const classes = useStyles()\n  const [expanded, setExpanded] = React.useState(false)\n\n  function handleExpandClick() {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent className={classes.cardContent}>\n        <Typography variant=\"h5\" className={classes.title}>\n          GPS\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Status: {GNSS_FIX_TYPE[robotState.gps.status]}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Latitdue (deg): {robotState.gps.latitude.toFixed(9)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Longitude (deg): {robotState.gps.longitude.toFixed(9)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Heading (deg): {((robotState.gps.heading / Math.PI) * 180).toFixed(2)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          North Velocity (m/s): {robotState.gps.northVelocity.toFixed(2)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          East Velocity (m/s): {robotState.gps.eastVelocity.toFixed(2)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Linear Speed (m/s):{\" \"}\n          {Math.sqrt(\n            Math.pow(robotState.gps.eastVelocity, 2) + Math.pow(robotState.gps.northVelocity, 2)\n          ).toFixed(2)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Angular Velocity (deg/s): {((robotState.gps.zAngularVelocity / Math.PI) * 180).toFixed(0)}\n        </Typography>\n\n        {/* Hidden Region */}\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          {/* <Typography variant=\"body1\" className={classes.body}>\n            X Magnetometer (mG): {robotState.gps.xMagnetometer.toFixed(4)}\n          </Typography>\n\n          <Typography variant=\"body1\" className={classes.body}>\n            Y Magnetometer (mG): {robotState.gps.yMagnetometer.toFixed(4)}\n          </Typography>\n\n          <Typography variant=\"body1\" className={classes.body}>\n            Z Magnetometer (mG): {robotState.gps.zMagnetometer.toFixed(4)}\n          </Typography> */}\n\n          {/* <Typography variant=\"body1\" className={classes.body}>\n            X Acceleration (m/s2): {robotState.gps.xAcceleration.toFixed(2)}\n          </Typography>\n\n          <Typography variant=\"body1\" className={classes.body}>\n            Y Acceleration (m/s2): {robotState.gps.yAcceleration.toFixed(2)}\n          </Typography>\n\n          <Typography variant=\"body1\" className={classes.body}>\n            Z Acceleration (m/s2): {robotState.gps.zAcceleration.toFixed(2)}\n          </Typography>\n\n          <Typography variant=\"body1\" className={classes.body}>\n            Latitude Varance: {robotState.gps.latitudeVariance.toFixed(2)}\n          </Typography>\n\n          <Typography variant=\"body1\" className={classes.body}>\n            Longitude Varance: {robotState.gps.longitudeVariance.toFixed(2)}\n          </Typography> */}\n        </Collapse>\n      </CardContent>\n\n      <CardActions disableSpacing>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { RobotState, MotorController } from \"../shared/interfaces\"\nimport { MC_STATE_STRING, NMT_STATE_STRING, MC_ERROR_WORD } from \"../shared/constants\"\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: theme.spacing(1),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  errorIcon: {\n    // marginLeft: theme.spacing(1.5),\n    verticalAlign: \"-3px\",\n    color: \"red\",\n    fontSize: \"17px\",\n  },\n}))\n\ninterface Props {\n  motorController: MotorController\n  id: number\n  location: string\n}\n\nexport default function Component({ motorController, id, location }: Props) {\n  const classes = useStyles()\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>\n        <Typography variant=\"h5\" className={classes.title}>\n          Motor Controller {id}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.title}>\n          Motor Location: {location}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Error: {MC_ERROR_WORD[motorController.errorWord]}{\" \"}\n          {motorController.errorWord !== 0 ? <ErrorOutlineIcon className={classes.errorIcon} /> : null}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Heartbeat Timeout: {motorController.isHeartbeatTimeout.toString()}{\" \"}\n          {motorController.isHeartbeatTimeout ? <ErrorOutlineIcon className={classes.errorIcon} /> : null}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          State: {MC_STATE_STRING[motorController.state]}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          NMT State: {NMT_STATE_STRING[motorController.heartbeatNmt]}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Motor Current (A): {motorController.motorCurrentDraw.toFixed(2)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Actual Wheel RPM: {motorController.wheelRpmActual.toFixed(0)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Winding Temperature (C): {motorController.windingTemperature.toFixed(0)}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport clsx from \"clsx\"\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardActions from \"@material-ui/core/CardActions\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { RobotState } from \"../shared/interfaces\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\"\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: theme.spacing(1),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  expand: {\n    margin: \"0 auto\",\n    paddingTop: 0,\n    paddingBottom: 0,\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  cardContent: {\n    paddingBottom: 0,\n  },\n  copyButton: {\n    paddingTop: 0,\n    marginLeft: theme.spacing(0.5),\n  },\n}))\n\nexport default function Component({ robotState }: { robotState: RobotState }) {\n  const classes = useStyles()\n  const [expanded, setExpanded] = React.useState(false)\n\n  function handleExpandClick() {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent className={classes.cardContent}>\n        <Typography variant=\"h5\" className={classes.title}>\n          Target Vehicle\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Latitude (deg): {robotState.targetVehicle.latitude.toFixed(7)}\n          <IconButton\n            className={classes.copyButton}\n            size=\"small\"\n            onClick={() =>\n              navigator.clipboard.writeText(robotState.targetVehicle.latitude.toFixed(7).toString())\n            }\n          >\n            <FileCopyOutlinedIcon style={{ fontSize: 16 }} />\n          </IconButton>\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Longitude (deg): {robotState.targetVehicle.longitude.toFixed(7)}\n          <IconButton\n            className={classes.copyButton}\n            size=\"small\"\n            onClick={() =>\n              navigator.clipboard.writeText(robotState.targetVehicle.longitude.toFixed(7).toString())\n            }\n          >\n            <FileCopyOutlinedIcon style={{ fontSize: 16 }} />\n          </IconButton>\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Heading (deg): {robotState.targetVehicle.heading.toFixed(2)}\n          <IconButton\n            className={classes.copyButton}\n            size=\"small\"\n            onClick={() =>\n              navigator.clipboard.writeText(robotState.targetVehicle.heading.toFixed(2).toString())\n            }\n          >\n            <FileCopyOutlinedIcon style={{ fontSize: 16 }} />\n          </IconButton>\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          Velocity (m/s): {robotState.targetVehicle.velocity.toFixed(2)}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          GPS Ready: {robotState.targetVehicle.gps_ready.toString()}\n        </Typography>\n\n        <Typography variant=\"body1\" className={classes.body}>\n          GPS Correction Type: {robotState.targetVehicle.gps_correction_type}\n        </Typography>\n      </CardContent>\n\n      <CardActions disableSpacing>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  )\n}\n","import React, { useEffect } from \"react\"\nimport Grid from \"@material-ui/core/Grid\"\n\nimport GeneralCard from \"../components/GeneralCard\"\nimport GpsCard from \"../components/GpsCard\"\nimport MotorControllerCard from \"../components/MotorControllerCard\"\nimport TargetVehicleCard from \"../components/TargetVehicleCard\"\nimport Networking from \"../networking\"\nimport Box from \"@material-ui/core/Box\"\nimport Typography from \"@material-ui/core/Typography\"\n\ninterface Props {\n  networking: Networking\n  setTopBarTitle: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport default function Page({ networking, setTopBarTitle }: Props) {\n  const robotState = networking.robotState\n\n  useEffect(() => {\n    setTopBarTitle(\"Robot Status\")\n  }, [])\n  return (\n    <div>\n      <Grid container spacing={2} alignItems=\"flex-start\">\n        <Grid item>\n          <GeneralCard robotState={robotState} />\n        </Grid>\n\n        <Grid item>\n          <GpsCard robotState={robotState} />\n        </Grid>\n\n        <Grid item>\n          <MotorControllerCard\n            motorController={robotState.motorControllers.leftFront}\n            id={1}\n            location=\"left_front\"\n          />\n        </Grid>\n\n        <Grid item>\n          <MotorControllerCard\n            motorController={robotState.motorControllers.leftBack}\n            id={2}\n            location=\"left_back\"\n          />\n        </Grid>\n\n        <Grid item>\n          <MotorControllerCard\n            motorController={robotState.motorControllers.rightFront}\n            id={3}\n            location=\"right_front\"\n          />\n        </Grid>\n\n        <Grid item>\n          <MotorControllerCard\n            motorController={robotState.motorControllers.rightBack}\n            id={4}\n            location=\"right_back\"\n          />\n        </Grid>\n\n        <Grid item>\n          <TargetVehicleCard robotState={robotState} />\n        </Grid>\n      </Grid>\n\n      <Typography variant=\"h6\" style={{ marginTop: \"15px\" }}>\n        Error Log\n      </Typography>\n      <Box\n        mb={2}\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"250px\"\n        style={{\n          border: \"2px solid lightgrey\",\n          overflow: \"hidden\",\n          overflowY: \"scroll\",\n          overflowX: \"scroll\",\n          padding: \"10px\",\n        }}\n      >\n        {networking.errorMessages.map((msg) => (\n          <div key={msg}> {msg} </div>\n        ))}\n      </Box>\n    </div>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\nimport Divider from \"@material-ui/core/Divider\"\nimport Typography from \"@material-ui/core/Typography\"\nimport PathRecorder from \"../../path-recorder\"\nimport Networking from \"../../networking\"\nimport { saveAs } from \"file-saver\"\n\nconst useStyles = makeStyles((theme) => ({\n  notes: {\n    margin: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}))\n\ninterface Props {\n  networking: Networking\n  pathRecorder: PathRecorder\n}\n\nexport default function Component({ networking, pathRecorder }: Props) {\n  const classes = useStyles()\n  const date = new Date()\n  const [snackOpen, setSnackOpen] = useState(false)\n\n  function exportPath() {\n    let pathString = \"Global\\n\"\n    for (let i = 0; i < pathRecorder.numberOfPoints; i++) {\n      pathString = pathString.concat(\n        pathRecorder.latitudes[i].toFixed(17).toString(),\n        \" \",\n        pathRecorder.longitudes[i].toFixed(17).toString(),\n        \"\\n\"\n      )\n    }\n    let blob = new Blob([pathString], { type: \"text/plain;charset=utf-8\" })\n    saveAs(blob, \"stride_path.txt\")\n  }\n\n  return (\n    <div>\n      <Typography variant=\"body1\" className={classes.notes}>\n        <ul style={{ margin: 0, paddingLeft: 20 }}>\n          <li>The GPS cordinates of the robot can be recorded here.</li>\n          <li>Move the robot to create a path when recording starts.</li>\n          <li>Tips for recording:</li>\n          <ul>\n            <li>Since speed is not recorded, move robot slowly to accurately capture path.</li>\n            <li>\n              You may record path that has sharp corners. Robot can be programmed later to stop at the corner\n              and rotate to the specified heading before moving again.\n            </li>\n          </ul>\n        </ul>\n      </Typography>\n      <Divider />\n\n      <Typography variant=\"body1\" className={classes.body}>\n        Status: {pathRecorder.isRecording ? \"Recording...\" : \"Not Recording\"}\n      </Typography>\n\n      <Typography variant=\"body1\" className={classes.body}>\n        Points Recorded: {pathRecorder.numberOfPoints}\n      </Typography>\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          pathRecorder.requestRecording()\n        }}\n      >\n        record\n      </Button>\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          pathRecorder.stopRecording()\n        }}\n      >\n        stop\n      </Button>\n\n      <br />\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          exportPath()\n        }}\n      >\n        export To file\n      </Button>\n\n      <br />\n\n      <Snackbar\n        open={snackOpen}\n        autoHideDuration={8000}\n        onClose={() => {\n          setSnackOpen(false)\n        }}\n      >\n        <MuiAlert elevation={6} variant=\"filled\" severity=\"info\">\n          Go to the SHARED tab above in another connected device.\n        </MuiAlert>\n      </Snackbar>\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          setSnackOpen(true)\n          networking.senders.sharePath(pathRecorder.latitudes, pathRecorder.longitudes)\n        }}\n      >\n        share with other devices\n      </Button>\n    </div>\n  )\n}\n","import React, { useRef, useLayoutEffect } from \"react\"\nimport * as am4core from \"@amcharts/amcharts4/core\"\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\nimport { EN_factors, LL2NE, NE2LL } from \"../../shared/utilities\"\nimport PathRecorder from \"../../path-recorder\"\n\nimport Button from \"@material-ui/core/Button\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\n// Non-material-ui CSS, used to maintain the chart's aspect ratio\n// This trick works because the percentage of paddingTop refers to the width of the parent element\nconst chartContainer = {\n  // make sure the min function is the same for both width and paddingTop\n  width: \"calc(min(100%, 90vh))\",\n  paddingTop: \"calc((min(100%, 90vh)) - 15px)\",\n  position: \"relative\",\n} as React.CSSProperties\n\nconst chartStyle = {\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  position: \"absolute\",\n} as React.CSSProperties\n\nclass PathViewer {\n  latitudes: number[]\n  longitudes: number[]\n  easts: number[] // array of East values\n  norths: number[] // array of North values\n  E_factor: number\n  N_factor: number\n  lat_ref: number // latitude reference\n  long_ref: number //longitude reference\n\n  constructor() {\n    this.latitudes = [0]\n    this.longitudes = [0]\n    this.easts = [0]\n    this.norths = [0]\n    this.E_factor = 0\n    this.N_factor = 0\n    this.lat_ref = 0\n    this.long_ref = 0\n  }\n\n  importFromRecorder(latitudes: number[], longitudes: number[], chartRef: React.MutableRefObject<any>) {\n    this.latitudes = latitudes\n    this.longitudes = longitudes\n\n    this.easts = []\n    this.norths = []\n\n    const [E_factor, N_factor] = EN_factors(latitudes[0])\n    this.E_factor = E_factor\n    this.N_factor = N_factor\n\n    this.lat_ref = latitudes[0]\n    this.long_ref = longitudes[0]\n\n    for (let i = 0; i < latitudes.length; i++) {\n      const [pos_north, pos_east] = LL2NE(\n        latitudes[i],\n        longitudes[i],\n        this.lat_ref,\n        this.long_ref,\n        this.E_factor,\n        this.N_factor\n      )\n\n      this.easts.push(pos_east)\n      this.norths.push(pos_north)\n    }\n\n    chartRef.current.data = this.createChartData()\n  }\n\n  isNumeric(str: string) {\n    return (\n      !isNaN(Number(str)) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\n      !isNaN(parseFloat(str))\n    ) // ...and ensure strings of whitespace fail\n  }\n\n  importFromFile(importFileRef: React.MutableRefObject<any>, chartRef: React.MutableRefObject<any>) {\n    this.easts = []\n    this.norths = []\n    this.latitudes = []\n    this.longitudes = []\n\n    const file = importFileRef.current.files[0]\n    const reader = new FileReader()\n    reader.addEventListener(\"load\", (event: any) => {\n      const text = event.target.result\n      const splitText = text.split(\"\\n\")\n\n      let lineNumber = 1\n      for (const line of splitText) {\n        // omit the first line in file\n        if (lineNumber === 1) {\n          lineNumber++\n          continue\n        }\n\n        const latLong = line.split(/ |\\t/)\n        if (latLong.length === 2) {\n          if (this.isNumeric(latLong[0]) && this.isNumeric(latLong[1])) {\n            this.latitudes.push(Number(latLong[0]))\n            this.longitudes.push(Number(latLong[1]))\n          }\n        }\n      }\n\n      const [E_factor, N_factor] = EN_factors(this.latitudes[0])\n      this.E_factor = E_factor\n      this.N_factor = N_factor\n\n      this.lat_ref = this.latitudes[0]\n      this.long_ref = this.longitudes[0]\n\n      for (let i = 0; i < this.latitudes.length; i++) {\n        const [pos_north, pos_east] = LL2NE(\n          this.latitudes[i],\n          this.longitudes[i],\n          this.lat_ref,\n          this.long_ref,\n          this.E_factor,\n          this.N_factor\n        )\n\n        this.easts.push(pos_east)\n        this.norths.push(pos_north)\n      }\n\n      importFileRef.current.value = \"\" // this is needed for importing the same file that has been saved over\n\n      chartRef.current.data = this.createChartData()\n    })\n    reader.readAsText(file)\n  }\n\n  createChartData() {\n    const chartData = []\n    for (let i = 0; i < this.easts.length; i++) {\n      chartData.push({ ax: this.easts[i], ay: this.norths[i], aValue: i })\n    }\n    return chartData\n  }\n\n  twoPointDistance(x1: number, y1: number, x2: number, y2: number) {\n    return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n  }\n\n  // spacing is in meters\n  correctPointSpacing(desiredSpacing: number) {\n    // const s = desiredSpacing\n    // const newEasts = [this.easts[0]]\n    // const newNorths = [this.norths[0]]\n    // let Cx = newEasts[0]\n    // let Cy = newNorths[0]\n    // let Tx = 0\n    // let Ty = 0\n    // let i = 1\n    // let g = this.twoPointDistance(Cx, Cy, this.easts[1], this.norths[1])\n    // const totalPoints = pathViewer.easts.length\n    // while (i <= totalPoints) {\n    //   if (g > s) {\n    //     while (g > s) {\n    //       Tx = Cx + s/g * (this.easts[i] - Cx)\n    //       Ty = Cy + s/g * (this.norths[i] - Cy)\n    //       newEasts.push(Tx)\n    //       newNorths.push(Ty)\n    //       Cx = Tx\n    //       Cy = Ty\n    //       g = this.twoPointDistance(Cx, Cy, this.easts[i], this.norths[i])\n    //     }\n    //   } else if (g < s) {\n    //     while (g < s) {\n    //       i += 1\n    //       g = this.twoPointDistance(Cx, Cy, this.easts[i], this.norths[i])\n    //     }\n    //   }\n    //   if (g === s) {\n    //     // ????\n    //   }\n    //   Cx = newEasts[newEasts.length - 1]\n    //   Cy = newNorths[newNorths.length - 1]\n    //   g = this.twoPointDistance(Cx, Cy, this.easts[i], this.norths[i])\n    //   if (g > s) {\n    //     if (k = i -1) {\n    //       Tx = Cx + s/g * (this.easts[i] - Cx)\n    //       Ty = Cy + s/g * (this.norths[i] - Cy)\n    //     } else {\n    //       k = i - 1\n    //     }\n    //   }\n    //   if (distance >= desiredSpacing) {\n    //     const newEast = newEasts[newEasts.length - 1] + (tail / distance) * (this.easts[i + 1] - this.easts[i])\n    //     const newNorth = this.norths[i] + (tail / distance) * (this.norths[i + 1] - this.norths[i])\n    // }\n  }\n}\n\ninterface Props {\n  pathRecorder: PathRecorder\n}\n\nconst pathViewer = new PathViewer()\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    margin: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}))\n\nexport default function Component({ pathRecorder }: Props) {\n  const classes = useStyles()\n  const importFileRef: React.MutableRefObject<any> = useRef()\n\n  // XY Chart\n  const chartRef: React.MutableRefObject<any> = useRef()\n  useLayoutEffect(() => {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart)\n\n    chart.paddingRight = 20\n\n    chart.data = pathViewer.createChartData()\n\n    // Create X axis\n    let xAxis = chart.xAxes.push(new am4charts.ValueAxis())\n    xAxis.renderer.minGridDistance = 40\n    xAxis.title.text = \"East\"\n    xAxis.renderer.baseGrid.strokeOpacity = 0.3\n    xAxis.renderer.baseGrid.strokeWidth = 1\n\n    // Create y axis\n    let yAxis = chart.yAxes.push(new am4charts.ValueAxis())\n    yAxis.title.text = \"North\"\n    yAxis.renderer.baseGrid.strokeOpacity = 0.3\n    yAxis.renderer.baseGrid.strokeWidth = 1\n\n    // Create series\n    let series1 = chart.series.push(new am4charts.LineSeries())\n    series1.dataFields.valueX = \"ax\"\n    series1.dataFields.valueY = \"ay\"\n    series1.dataFields.value = \"aValue\"\n    series1.strokeWidth = 2\n\n    let bullet1 = series1.bullets.push(new am4charts.CircleBullet())\n    bullet1.circle.radius = 3\n\n    chart.numberFormatter.numberFormat = \"#.##\"\n    bullet1.tooltipText = \"[bold]Index {value}[/] ({valueX}, {valueY})\"\n\n    //scrollbars\n    chart.scrollbarX = new am4core.Scrollbar()\n    chart.scrollbarY = new am4core.Scrollbar()\n\n    chartRef.current = chart\n\n    return () => {\n      chart.dispose()\n    }\n  }, [])\n\n  return (\n    <div>\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          pathViewer.importFromRecorder(pathRecorder.latitudes, pathRecorder.longitudes, chartRef)\n        }}\n      >\n        import from recorder\n      </Button>\n\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" component=\"label\">\n        import from file\n        <input\n          type=\"file\"\n          ref={importFileRef}\n          onChange={() => pathViewer.importFromFile(importFileRef, chartRef)}\n          hidden\n        />\n      </Button>\n\n      <div style={chartContainer}>\n        <div id=\"chartdiv\" style={chartStyle} />\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Networking from \"../../networking\"\nimport { saveAs } from \"file-saver\"\n\nconst useStyles = makeStyles((theme) => ({\n  notes: {\n    margin: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n}))\n\ninterface Props {\n  networking: Networking\n}\n\nexport default function Component({ networking }: Props) {\n  const classes = useStyles()\n\n  const sharedPath = networking.receivedSharedPath\n  const date = new Date()\n\n  function exportPath() {\n    let pathString = \"Global\\n\"\n    for (let i = 0; i < sharedPath.latitudes.length; i++) {\n      pathString = pathString.concat(\n        sharedPath.latitudes[i].toFixed(17).toString(),\n        \" \",\n        sharedPath.longitudes[i].toFixed(17).toString(),\n        \"\\n\"\n      )\n    }\n    let blob = new Blob([pathString], { type: \"text/plain;charset=utf-8\" })\n    saveAs(blob, \"stride_path.txt\")\n  }\n\n  return (\n    <div>\n      <Typography variant=\"body1\" className={classes.notes}>\n        Shared path from another device will appear here.\n      </Typography>\n\n      <Typography variant=\"body1\" className={classes.body}>\n        Time Received: {sharedPath.timestamp} <br />\n        Number of Points: {sharedPath.latitudes.length}\n      </Typography>\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          exportPath()\n        }}\n      >\n        export To file\n      </Button>\n    </div>\n  )\n}\n","import React, { useEffect } from \"react\"\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport Box from \"@material-ui/core/Box\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AppBar from \"@material-ui/core/AppBar\"\n\nimport PathRecorderTab from \"../components/path/PathRecoderTab\"\nimport PathViewingTab from \"../components/path/PathViewingTab\"\nimport SharedPathTab from \"../components/path/SharedPathTab\"\nimport PathRecorder from \"../path-recorder\"\nimport Networking from \"../networking\"\n\ninterface Props {\n  networking: Networking\n  setTopBarTitle: React.Dispatch<React.SetStateAction<string>>\n  pathRecorder: PathRecorder\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode\n  index: any\n  value: any\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} {...other}>\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    // flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  tab: {\n    color: \"rgb(64,64,64)\",\n  },\n}))\n\nexport default function Page({ networking, setTopBarTitle, pathRecorder }: Props) {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue)\n  }\n\n  useEffect(() => {\n    setTopBarTitle(\"Path\")\n  }, [])\n\n  return (\n    // <Grid container spacing={2} alignItems=\"flex-start\">\n    //   <Grid item>\n    //     <PathRecorderCard robotState={robotState} pathRecorder={pathRecorder} />\n    //   </Grid>\n    // </Grid>\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          onChange={handleChange}\n        >\n          <Tab label=\"Record\" className={classes.tab} />\n          <Tab label=\"View\" className={classes.tab} />\n          <Tab label=\"Shared\" className={classes.tab} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <PathRecorderTab networking={networking} pathRecorder={pathRecorder} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <PathViewingTab pathRecorder={pathRecorder} />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <SharedPathTab networking={networking} />\n      </TabPanel>\n    </div>\n  )\n}\n","import React, { useState, useRef } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Button from \"@material-ui/core/Button\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\n\nimport Networking from \"../../networking\"\n\nconst useStyles = makeStyles((theme) => ({\n  notes: {\n    margin: theme.spacing(1),\n    marginBottom: theme.spacing(3),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  snackbar: {\n    opacity: 0.9,\n  },\n}))\n\ninterface Props {\n  networking: Networking\n}\n\nexport default function Component({ networking }: Props) {\n  const classes = useStyles()\n\n  const uploadPathRef: React.MutableRefObject<any> = useRef()\n  const uploadScriptRef: React.MutableRefObject<any> = useRef()\n\n  const [wrongExtensionSnackbarOpen, setWrongExtensionSnackbarOpen] = useState(false)\n\n  function uploadPath() {\n    const file = uploadPathRef.current.files[0]\n    uploadPathRef.current.value = \"\" // this is needed for uploading file with same filename but different content\n\n    if (file.name.split(\".\")[1] !== \"txt\") {\n      setWrongExtensionSnackbarOpen(true)\n      return\n    }\n\n    const reader = new FileReader()\n    reader.addEventListener(\"load\", (event: any) => {\n      const fileContent = event.target.result\n      networking.senders.uploadPath(file.name, fileContent)\n    })\n    reader.readAsText(file)\n  }\n\n  function uploadScript() {\n    const file = uploadScriptRef.current.files[0]\n    uploadScriptRef.current.value = \"\" // this is needed for uploading file with same filename but different content\n\n    if (file.name.split(\".\")[1] !== \"py\") {\n      setWrongExtensionSnackbarOpen(true)\n      return\n    }\n\n    const reader = new FileReader()\n    reader.addEventListener(\"load\", (event: any) => {\n      const fileContent = event.target.result\n      networking.senders.uploadScript(file.name, fileContent)\n    })\n    reader.readAsText(file)\n  }\n\n  return (\n    <div>\n      <Typography variant=\"body1\" className={classes.notes}>\n        Note that the robot only stores the most recently uploaded path and script files.\n      </Typography>\n\n      <Typography variant=\"body1\" className={classes.body}>\n        Path (.txt file): {networking.robotState.pathFollower.pathName} <br />\n        Script (.py file): {networking.robotState.pathFollower.scriptName}\n      </Typography>\n\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" component=\"label\">\n        upload path\n        <input\n          type=\"file\"\n          ref={uploadPathRef}\n          onChange={() => {\n            uploadPath()\n          }}\n          hidden\n        />\n      </Button>\n\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" component=\"label\">\n        upload script\n        <input\n          type=\"file\"\n          ref={uploadScriptRef}\n          onChange={() => {\n            uploadScript()\n          }}\n          hidden\n        />\n      </Button>\n\n      <Snackbar\n        className={classes.snackbar}\n        open={wrongExtensionSnackbarOpen}\n        autoHideDuration={6000}\n        onClose={() => {\n          setWrongExtensionSnackbarOpen(false)\n        }}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n      >\n        <MuiAlert elevation={6} variant=\"filled\" severity=\"warning\">\n          Incorrect file extension\n        </MuiAlert>\n      </Snackbar>\n    </div>\n  )\n}\n","import React, { useState, useRef, useEffect, useLayoutEffect } from \"react\"\n\nimport * as am4core from \"@amcharts/amcharts4/core\"\nimport * as am4charts from \"@amcharts/amcharts4/charts\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Container from \"@material-ui/core/Container\"\nimport Button from \"@material-ui/core/Button\"\nimport Box from \"@material-ui/core/Box\"\nimport Typography from \"@material-ui/core/Typography\"\nimport Networking from \"../../networking\"\nimport { EN_factors, LL2NE, NE2LL } from \"../../shared/utilities\"\nimport { GNSS_FIX_TYPE } from \"../../shared/constants\"\n\n// Non-material-ui CSS, used to maintain the chart's aspect ratio\n// This trick works because the percentage of paddingTop refers to the width of the parent element\nconst chartContainer = {\n  // make sure the min function is the same for both width and paddingTop\n  width: \"calc(min(100%, 70vh))\",\n  paddingTop: \"calc((min(100%, 70vh)) - 0px)\",\n  position: \"relative\",\n} as React.CSSProperties\n\nconst chartStyle = {\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  position: \"absolute\",\n} as React.CSSProperties\n\nclass PathDisplay {\n  latitudes: number[]\n  longitudes: number[]\n  easts: number[] // array of East values\n  norths: number[] // array of North values\n  E_factor: number\n  N_factor: number\n  lat_ref: number // latitude reference\n  long_ref: number //longitude reference\n  robot_east: number\n  robot_north: number\n\n  constructor() {\n    this.latitudes = [0]\n    this.longitudes = [0]\n    this.easts = [0]\n    this.norths = [0]\n    this.E_factor = 0\n    this.N_factor = 0\n    this.lat_ref = 0\n    this.long_ref = 0\n    this.robot_east = 0\n    this.robot_north = 0\n  }\n\n  plotPathSeries(\n    latitudes: number[],\n    longitudes: number[],\n    pathSeriesRef: React.MutableRefObject<any>,\n    xAxisRef: React.MutableRefObject<any>,\n    yAxisRef: React.MutableRefObject<any>,\n    forceRun: boolean\n  ) {\n    if (forceRun === true || (this.latitudes !== latitudes && pathSeriesRef.current !== undefined)) {\n      this.latitudes = latitudes\n      this.longitudes = longitudes\n\n      this.easts = []\n      this.norths = []\n\n      const [E_factor, N_factor] = EN_factors(latitudes[0])\n      this.E_factor = E_factor\n      this.N_factor = N_factor\n\n      this.lat_ref = latitudes[0]\n      this.long_ref = longitudes[0]\n\n      for (let i = 0; i < latitudes.length; i++) {\n        const [pos_north, pos_east] = LL2NE(\n          latitudes[i],\n          longitudes[i],\n          this.lat_ref,\n          this.long_ref,\n          this.E_factor,\n          this.N_factor\n        )\n\n        this.easts.push(pos_east)\n        this.norths.push(pos_north)\n      }\n\n      const eastMin = Math.min(...this.easts)\n      const eastMax = Math.max(...this.easts)\n      const northMin = Math.min(...this.norths)\n      const northMax = Math.max(...this.norths)\n\n      const axisLength = Math.max(eastMax - eastMin, northMax - northMin)\n\n      xAxisRef.current.min = eastMin - 3\n      xAxisRef.current.max = eastMin + axisLength + 3\n      yAxisRef.current.min = northMin - 3\n      yAxisRef.current.max = northMin + axisLength + 3\n\n      pathSeriesRef.current.data = this.createPathSeriesData()\n    }\n  }\n\n  plotRobotSeries(\n    latitude: number,\n    longitude: number,\n    headingRadian: number,\n    robotSeriesRef: React.MutableRefObject<any>\n  ) {\n    if (robotSeriesRef.current !== undefined) {\n      const [pos_north, pos_east] = LL2NE(\n        latitude,\n        longitude,\n        this.lat_ref,\n        this.long_ref,\n        this.E_factor,\n        this.N_factor\n      )\n\n      robotSeriesRef.current.addData(\n        { bx: pos_east, by: pos_north, angle: (headingRadian / Math.PI) * 180 },\n        1\n      )\n\n      // For displaying the numerical values of robot location\n      this.robot_east = pos_east\n      this.robot_north = pos_north\n    }\n  }\n\n  createPathSeriesData() {\n    const pathSeriesData = []\n    for (let i = 0; i < this.easts.length; i++) {\n      pathSeriesData.push({ ax: this.easts[i], ay: this.norths[i], aValue: i })\n    }\n    return pathSeriesData\n  }\n}\n\nconst pathDisplay = new PathDisplay()\n\nconst useStyles = makeStyles((theme) => ({\n  notes: {\n    margin: theme.spacing(1),\n  },\n  body: {\n    margin: theme.spacing(1),\n  },\n  button: {\n    margin: theme.spacing(0.5),\n    padding: theme.spacing(1),\n    fontSize: 11,\n  },\n  messageBox: {\n    maxHeight: 10,\n  },\n}))\n\ninterface Props {\n  networking: Networking\n}\n\nexport default function Component({ networking }: Props) {\n  const classes = useStyles()\n\n  const downloadTestData = () => {\n    const link = document.createElement(\"a\")\n    link.href = `http://195.0.0.${networking.guiState.id}:3001/test-data.csv`\n    link.click()\n  }\n\n  const pathSeriesRef: React.MutableRefObject<any> = useRef()\n  const robotSeriesRef: React.MutableRefObject<any> = useRef()\n  const xAxisRef: React.MutableRefObject<any> = useRef()\n  const yAxisRef: React.MutableRefObject<any> = useRef()\n\n  pathDisplay.plotPathSeries(\n    networking.pathToFollow.latitudes,\n    networking.pathToFollow.longitudes,\n    pathSeriesRef,\n    xAxisRef,\n    yAxisRef,\n    false\n  )\n\n  pathDisplay.plotRobotSeries(\n    networking.robotState.gps.latitude,\n    networking.robotState.gps.longitude,\n    networking.robotState.gps.heading,\n    robotSeriesRef\n  )\n\n  useLayoutEffect(() => {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart)\n\n    chart.paddingRight = 20\n\n    // Create X axis\n    let xAxis = chart.xAxes.push(new am4charts.ValueAxis())\n    xAxis.renderer.minGridDistance = 40\n    xAxis.title.text = \"East\"\n    xAxis.renderer.baseGrid.strokeOpacity = 0.5\n    xAxis.renderer.baseGrid.strokeWidth = 1\n    xAxis.strictMinMax = true\n\n    // Create y axis\n    let yAxis = chart.yAxes.push(new am4charts.ValueAxis())\n    yAxis.renderer.minGridDistance = 40\n    yAxis.title.text = \"North\"\n    yAxis.renderer.baseGrid.strokeOpacity = 0.5\n    yAxis.renderer.baseGrid.strokeWidth = 1\n    yAxis.strictMinMax = true\n\n    // Path series\n    let pathSeries = chart.series.push(new am4charts.LineSeries())\n    pathSeries.dataFields.valueX = \"ax\"\n    pathSeries.dataFields.valueY = \"ay\"\n    pathSeries.dataFields.value = \"aValue\"\n    pathSeries.strokeWidth = 2\n\n    let bullet1 = pathSeries.bullets.push(new am4charts.CircleBullet())\n    bullet1.circle.radius = 3\n\n    // Robot series\n    let robotSeries = chart.series.push(new am4charts.LineSeries())\n    robotSeries.dataFields.valueX = \"bx\"\n    robotSeries.dataFields.valueY = \"by\"\n    robotSeries.strokeWidth = 2\n    robotSeries.stroke = am4core.color(\"#ff0000\")\n\n    // It must be initialized with two data points to prevent blinking\n    robotSeries.data = [\n      { bx: 0, by: 0, angle: 0 },\n      { bx: 0, by: 0, angle: 0 },\n    ]\n\n    let bullet2 = robotSeries.bullets.push(new am4charts.Bullet())\n    bullet2.propertyFields.rotation = \"angle\"\n\n    // Add a triangle to act as am arrow\n    let arrow = bullet2.createChild(am4core.Triangle)\n    arrow.horizontalCenter = \"middle\"\n    arrow.verticalCenter = \"middle\"\n    arrow.direction = \"top\"\n    arrow.width = 10\n    arrow.height = 25\n    arrow.fill = am4core.color(\"#ffffff00\")\n    arrow.strokeWidth = 3\n\n    chart.numberFormatter.numberFormat = \"#.##\"\n    bullet1.tooltipText = \"[bold]Index {value}[/] ({valueX}, {valueY})\"\n\n    pathSeriesRef.current = pathSeries\n    robotSeriesRef.current = robotSeries\n    xAxisRef.current = xAxis\n    yAxisRef.current = yAxis\n\n    pathDisplay.plotPathSeries(\n      networking.pathToFollow.latitudes,\n      networking.pathToFollow.longitudes,\n      pathSeriesRef,\n      xAxisRef,\n      yAxisRef,\n      true\n    )\n\n    return () => {\n      chart.dispose()\n    }\n  }, [])\n\n  return (\n    <div>\n      {/* <Typography variant=\"body1\" className={classes.notes}>\n        Start path following, and visualize robot location and other status like speed\n      </Typography> */}\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          networking.senders.startPathFollowing()\n        }}\n      >\n        start test\n      </Button>\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          networking.senders.returnToStart()\n        }}\n      >\n        return to start position\n      </Button>\n\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={() => {\n          downloadTestData()\n        }}\n      >\n        download test data\n      </Button>\n\n      <Typography variant=\"body2\" className={classes.body}>\n        GPS status: {GNSS_FIX_TYPE[networking.robotState.gps.status]}\n        <br />\n        Robot Location: ({pathDisplay.robot_east.toFixed(2)}, {pathDisplay.robot_north.toFixed(2)})\n        <br />\n        Heading: {((networking.robotState.gps.heading / Math.PI) * 180).toFixed(0)} deg\n        <br />\n        Speed:{\" \"}\n        {Math.sqrt(\n          networking.robotState.gps.eastVelocity ** 2 + networking.robotState.gps.northVelocity ** 2\n        ).toFixed(2)}{\" \"}\n        m/s\n      </Typography>\n\n      <div style={chartContainer}>\n        <div id=\"chartdiv\" style={chartStyle} />\n      </div>\n\n      <Typography variant=\"h6\" style={{ marginTop: \"15px\" }}>\n        Test Log\n      </Typography>\n      <Box\n        mb={2}\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"250px\"\n        style={{\n          border: \"2px solid lightgrey\",\n          overflow: \"hidden\",\n          overflowY: \"scroll\",\n          overflowX: \"scroll\",\n          padding: \"10px\",\n        }}\n      >\n        {networking.testLogMessages.map((msg) => (\n          <div key={msg}> {msg} </div>\n        ))}\n      </Box>\n    </div>\n  )\n}\n","import React, { useEffect } from \"react\"\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\nimport Tabs from \"@material-ui/core/Tabs\"\nimport Tab from \"@material-ui/core/Tab\"\nimport Box from \"@material-ui/core/Box\"\nimport Typography from \"@material-ui/core/Typography\"\nimport AppBar from \"@material-ui/core/AppBar\"\n\nimport PathRecorder from \"../path-recorder\"\nimport Networking from \"../networking\"\nimport PrepareTab from \"../components/path_following/PrepareTab\"\nimport TestTab from \"../components/path_following/TestTab\"\n\ninterface Props {\n  networking: Networking\n  setTopBarTitle: React.Dispatch<React.SetStateAction<string>>\n  pathRecorder: PathRecorder\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode\n  index: any\n  value: any\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} {...other}>\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  )\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    // flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  tab: {\n    color: \"rgb(64,64,64)\",\n  },\n}))\n\nexport default function Page({ networking, setTopBarTitle, pathRecorder }: Props) {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue)\n  }\n\n  useEffect(() => {\n    setTopBarTitle(\"Path Following\")\n  }, [])\n\n  return (\n    // <Grid container spacing={2} alignItems=\"flex-start\">\n    //   <Grid item>\n    //     <PathRecorderCard robotState={robotState} pathRecorder={pathRecorder} />\n    //   </Grid>\n    // </Grid>\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          onChange={handleChange}\n        >\n          <Tab label=\"prepare\" className={classes.tab} />\n          <Tab label=\"test\" className={classes.tab} />\n        </Tabs>\n      </AppBar>\n      <TabPanel value={value} index={0}>\n        <PrepareTab networking={networking} />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <TestTab networking={networking} />\n      </TabPanel>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nimport Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\nimport InfoIcon from \"@material-ui/icons/Info\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport Modal from \"@material-ui/core/Modal\"\nimport Typography from \"@material-ui/core/Typography\"\n\nimport Networking from \"../networking\"\n\nconst useStyles = makeStyles((theme) => ({\n  motorTempInfoButton: {\n    paddingBottom: 1,\n    paddingTop: 0,\n    marginLeft: theme.spacing(1),\n    color: \"white\",\n  },\n  motorTempInfoCard: {\n    width: 400,\n  },\n  snackbar: {\n    opacity: 0.85,\n  },\n}))\n\ninterface Props {\n  networking: Networking\n}\n\nexport default function Component({ networking }: Props) {\n  const classes = useStyles()\n\n  const [maxMotorTemp, setMaxMotorTemp] = useState(0)\n  const [snackbarOpen, setSnackbarOpen] = useState(false)\n  const [modalOpen, setModalOpen] = useState(false)\n\n  // handleMotorTemperature()\n  useEffect(() => {\n    const temperature_threshold = 85\n\n    const mcs = networking.robotState.motorControllers\n    const max_t = Math.max(\n      mcs.leftBack.windingTemperature,\n      mcs.leftFront.windingTemperature,\n      mcs.rightBack.windingTemperature,\n      mcs.rightFront.windingTemperature\n    )\n    setMaxMotorTemp(max_t)\n\n    if (max_t > temperature_threshold) {\n      setSnackbarOpen(true)\n    } else {\n      setSnackbarOpen(false)\n    }\n  })\n\n  return (\n    <div>\n      <Modal\n        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}\n        open={modalOpen}\n        onClose={() => setModalOpen(false)}\n      >\n        <Card className={classes.motorTempInfoCard} variant=\"outlined\">\n          <CardContent>\n            <Typography variant=\"body1\">\n              Upon reaching the temperature threshold, if Stride is on a slope, it will move downhill until\n              flat ground. <br />\n              This feature is omitted in the \"E-stopped\" state, in which Stride will attempt to stay still\n              until the motors give out.\n            </Typography>\n          </CardContent>\n        </Card>\n      </Modal>\n\n      <Snackbar className={classes.snackbar} open={snackbarOpen}>\n        <MuiAlert elevation={6} variant=\"filled\" severity=\"warning\">\n          Motor Temp: {maxMotorTemp} / 105C\n          <IconButton\n            className={classes.motorTempInfoButton}\n            size=\"small\"\n            onClick={() => {\n              setModalOpen(true)\n            }}\n          >\n            <InfoIcon />\n          </IconButton>\n        </MuiAlert>\n      </Snackbar>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\"\n\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport MuiAlert from \"@material-ui/lab/Alert\"\n\nimport Networking from \"../networking\"\n\nconst useStyles = makeStyles((theme) => ({\n  snackbar: {\n    opacity: 0.85,\n  },\n}))\n\ninterface Props {\n  networking: Networking\n}\n\nexport default function Component({ networking }: Props) {\n  const classes = useStyles()\n\n  const [snackbarOpen, setSnackbarOpen] = useState(false)\n\n  useEffect(() => {\n    if (networking.isNewTestDataReady === true) {\n      setSnackbarOpen(true)\n      networking.isNewTestDataReady = false\n    }\n  })\n\n  return (\n    <div>\n      <Snackbar\n        className={classes.snackbar}\n        open={snackbarOpen}\n        autoHideDuration={5000}\n        onClose={() => {\n          setSnackbarOpen(false)\n        }}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n      >\n        <MuiAlert elevation={6} variant=\"filled\" severity=\"info\">\n          Test Data Ready for Download\n        </MuiAlert>\n      </Snackbar>\n    </div>\n  )\n}\n","// abbreviations:\n// refLat: reference latitude\n// refLong: reference longitude\n// EN: East North\n\nimport { EN_factors, LL2NE, NE2LL } from \"./shared/utilities\"\n\nexport default class PathRecorder {\n  isRecording: boolean\n  isRecordingLine: boolean\n  hasBeenRecordingLine: boolean\n  pointDistance: number\n  latitudes: number[]\n  longitudes: number[]\n  priorLatitude: number\n  priorLongitude: number\n  latRef: number\n  longRef: number\n  E_factor: number\n  N_factor: number\n  recorderId: number\n  numberOfPoints: number\n\n  constructor() {\n    this.isRecording = false\n    this.isRecordingLine = false\n    this.hasBeenRecordingLine = false\n    this.pointDistance = 0.3 // meters\n    this.latitudes = []\n    this.longitudes = []\n    this.priorLatitude = -1\n    this.priorLongitude = -1\n    this.latRef = -1\n    this.longRef = -1\n    this.E_factor = 0\n    this.N_factor = 0\n    this.recorderId = 0\n    this.numberOfPoints = 0\n  }\n\n  requestRecording() {\n    this.isRecording = true\n    this.isRecordingLine = false\n    this.hasBeenRecordingLine = false\n    this.latitudes = []\n    this.longitudes = []\n    this.priorLatitude = -1\n    this.priorLongitude = -1\n    this.numberOfPoints = 0\n  }\n\n  stopRecording() {\n    this.isRecording = false\n    this.isRecordingLine = false\n\n    //DO NOT ADD THIS HERE: this.hasBeenRecordingLine = false\n  }\n\n  toggleLineRecording() {\n    this.isRecordingLine = !this.isRecordingLine\n  }\n\n  recordWhenRequested(latitude: number, longitude: number) {\n    if (this.isRecording) {\n      const haversineDistance = this.haversine(this.priorLatitude, latitude, this.priorLongitude, longitude)\n\n      if (this.priorLatitude === -1 || this.priorLongitude === -1) {\n        this.priorLatitude = latitude\n        this.priorLongitude = longitude\n\n        this.latitudes.push(latitude)\n        this.longitudes.push(longitude)\n        this.numberOfPoints += 1\n\n        this.latRef = latitude\n        this.longRef = longitude\n\n        const EN = EN_factors(this.latRef)\n        this.E_factor = EN[0]\n        this.N_factor = EN[1]\n      } else if (this.isRecordingLine) {\n        this.hasBeenRecordingLine = true\n      } else if (this.hasBeenRecordingLine) {\n        this.hasBeenRecordingLine = false\n        const [northStart, eastStart] = LL2NE(\n          this.priorLatitude,\n          this.priorLongitude,\n          this.latRef,\n          this.longRef,\n          this.E_factor,\n          this.N_factor\n        )\n        const [northEnd, eastEnd] = LL2NE(\n          latitude,\n          longitude,\n          this.latRef,\n          this.longRef,\n          this.E_factor,\n          this.N_factor\n        )\n        const lineDistance = ((northStart - northEnd) ** 2 + (eastStart - eastEnd) ** 2) ** 0.5\n        const divisions = Math.floor(lineDistance / this.pointDistance)\n\n        // good that the FOR loop won't run if divisions is < 1\n        for (let i = 1; i <= divisions; i++) {\n          const newNorth = northStart + (i / divisions) * (northEnd - northStart)\n          const newEast = eastStart + (i / divisions) * (eastEnd - eastStart)\n          const [newLatitude, newLongitude] = NE2LL(\n            newNorth,\n            newEast,\n            this.latRef,\n            this.longRef,\n            this.E_factor,\n            this.N_factor\n          )\n          this.latitudes.push(newLatitude)\n          this.longitudes.push(newLongitude)\n          this.numberOfPoints += 1\n\n          this.priorLatitude = newLatitude\n          this.priorLongitude = newLongitude\n        }\n      } else if (haversineDistance > this.pointDistance) {\n        this.latitudes.push(latitude)\n        this.longitudes.push(longitude)\n        this.numberOfPoints += 1\n\n        this.priorLatitude = latitude\n        this.priorLongitude = longitude\n      }\n    }\n  }\n\n  // transformToRobotCenter(latRadian2: number, longRadian2: number, headingRadian: number) {\n  //   const R = 6371008 // Earth mean radisu in meters\n  //   const r = R * Math.cos(latRadian2) // radius of the earth circular slice at latitude2 in meters\n  //   const d = 0.2736 // distance between gps and robot center in meters\n  //   const theta = 0.11 // the radian angle between the gps and the robot center\n\n  //   const latRadian1 = (R * latRadian2 - d * Math.cos(headingRadian + theta)) / R\n  //   const longRadian1 = (r * longRadian2 - d * Math.sin(headingRadian + theta)) / r\n\n  //   const latCentered = (latRadian1 / Math.PI) * 180\n  //   const longCentered = (longRadian1 / Math.PI) * 180\n\n  //   return [latCentered, longCentered]\n  // }\n\n  // Haversine Distance in meters between two latlong points\n  haversine(lat1: number, lat2: number, long1: number, long2: number) {\n    const latRadian1 = (lat1 / 180) * Math.PI\n    const latRadian2 = (lat2 / 180) * Math.PI\n    const longRadian1 = (long1 / 180) * Math.PI\n    const longRadian2 = (long2 / 180) * Math.PI\n\n    const R = 6371008 // Earth mean radisu in meters\n    const deltaLat = latRadian2 - latRadian1\n    const deltaLong = longRadian2 - longRadian1\n\n    // Small angle approximation is used\n    const distance =\n      R * Math.sqrt(deltaLat ** 2 + Math.cos(latRadian1) * Math.cos(latRadian2) * deltaLong ** 2)\n\n    return distance // in meters\n  }\n}\n","import \"./App.css\"\nimport React, { useState, useEffect } from \"react\"\nimport { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\"\nimport { DRAWER_WIDTH } from \"./shared/constants\"\n\nimport Networking from \"./networking\"\n\nimport SideDrawer from \"./components/SideDrawer\"\nimport TopBar from \"./components/TopBar\"\nimport InitialSetup from \"./pages/InitialSetup\"\nimport ManualControl from \"./pages/ManualControl\"\nimport RobotStatus from \"./pages/RobotStatus\"\nimport Path from \"./pages/Path\"\nimport PathFollowing from \"./pages/PathFollowing\"\nimport AutoDownhill from \"./components/AutoDownhill\"\nimport TestDataReadyPopUp from \"./components/TestDataReadyPopUp\"\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport PathRecorder from \"./path-recorder\"\n\nlet networking = new Networking(\"\", false)\n\nconst pathRecorder = new PathRecorder() // initialized in App.tsx because components like TopBar needs its data\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: theme.mixins.toolbar, // necessary for content to be below app bar\n  content: {\n    [theme.breakpoints.up(\"md\")]: {\n      width: `calc(100% - ${DRAWER_WIDTH}px)`,\n      marginLeft: DRAWER_WIDTH,\n    },\n    padding: theme.spacing(3),\n  },\n}))\n\nexport default function App() {\n  const classes = useStyles()\n\n  const [forceRerender, setForceRerender] = useState({})\n  const [topBarTitle, setTopBarTitle] = useState(\"\")\n  const [mobileOpen, setMobileOpen] = useState(false) // open status of the side menu in mobile screen\n\n  function handleRobotConnect(id: string) {\n    if (id === \"useRecentId\") {\n      networking.socket.close()\n      networking = new Networking(networking.lastConnectedId, networking.isConnectedOnce)\n    } else {\n      networking.socket.close()\n      networking = new Networking(id, false)\n    }\n  }\n  function handleRobotDisconnect() {\n    networking.socket.close()\n  }\n\n  useEffect(() => {\n    const id1 = setInterval(() => {\n      setForceRerender({})\n\n      // record path when requested\n      const latitude = networking.robotState.gps.latitude\n      const longitude = networking.robotState.gps.longitude\n      pathRecorder.recordWhenRequested(latitude, longitude)\n    }, 100)\n\n    return () => {\n      clearInterval(id1)\n    }\n  }, [])\n\n  // console.log(\"rendered\")\n\n  return (\n    <Router>\n      <CssBaseline />\n      <AutoDownhill networking={networking} />\n      <TestDataReadyPopUp networking={networking} />\n      <TopBar\n        networking={networking}\n        setMobileOpen={setMobileOpen}\n        topBarTitle={topBarTitle}\n        pathRecorder={pathRecorder}\n        handleRobotConnect={handleRobotConnect}\n      />\n      <SideDrawer networking={networking} mobileOpen={mobileOpen} setMobileOpen={setMobileOpen} />\n\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Switch>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/initialsetup\" />\n          </Route>\n\n          <Route path=\"/initialsetup\">\n            <InitialSetup\n              networking={networking}\n              handleRobotConnect={handleRobotConnect}\n              handleRobotDisconnect={handleRobotDisconnect}\n              setTopBarTitle={setTopBarTitle}\n            />\n          </Route>\n\n          <Route path=\"/manualcontrol\">\n            <ManualControl\n              networking={networking}\n              setTopBarTitle={setTopBarTitle}\n              pathRecorder={pathRecorder}\n            />\n          </Route>\n\n          <Route path=\"/robotstatus\">\n            <RobotStatus networking={networking} setTopBarTitle={setTopBarTitle} />\n          </Route>\n\n          <Route path=\"/path\">\n            <Path networking={networking} setTopBarTitle={setTopBarTitle} pathRecorder={pathRecorder} />\n          </Route>\n\n          <Route path=\"/pathfollowing\">\n            <PathFollowing\n              networking={networking}\n              setTopBarTitle={setTopBarTitle}\n              pathRecorder={pathRecorder}\n            />\n          </Route>\n        </Switch>\n      </main>\n    </Router>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}